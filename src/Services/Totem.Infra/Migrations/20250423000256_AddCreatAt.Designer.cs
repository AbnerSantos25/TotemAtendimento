// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Totem.Infra.Data;

#nullable disable

namespace Totem.Infra.Migrations
{
    [DbContext(typeof(TotemDbContext))]
    [Migration("20250423000256_AddCreatAt")]
    partial class AddCreatAt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Totem")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Totem.Domain.Aggregates.PasswordAggregate.Password", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Preferential")
                        .HasColumnType("bit");

                    b.Property<Guid>("QueueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Served")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ServiceLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("QueueId");

                    b.HasIndex("ServiceLocationId");

                    b.ToTable("Passwords", "Totem");
                });

            modelBuilder.Entity("Totem.Domain.Aggregates.QueueAggregate.Queue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("ServiceLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceLocationId");

                    b.ToTable("Queues", "Totem");
                });

            modelBuilder.Entity("Totem.Domain.Aggregates.ServiceLocationAggregate.ServiceLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ServiceLocations", "Totem");
                });

            modelBuilder.Entity("Totem.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users", "Totem");
                });

            modelBuilder.Entity("Totem.Domain.Aggregates.PasswordAggregate.Password", b =>
                {
                    b.HasOne("Totem.Domain.Aggregates.QueueAggregate.Queue", "Queue")
                        .WithMany("Passwords")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Totem.Domain.Aggregates.ServiceLocationAggregate.ServiceLocation", "ServiceLocation")
                        .WithMany()
                        .HasForeignKey("ServiceLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Queue");

                    b.Navigation("ServiceLocation");
                });

            modelBuilder.Entity("Totem.Domain.Aggregates.QueueAggregate.Queue", b =>
                {
                    b.HasOne("Totem.Domain.Aggregates.ServiceLocationAggregate.ServiceLocation", null)
                        .WithMany("Queues")
                        .HasForeignKey("ServiceLocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Totem.Domain.Aggregates.QueueAggregate.Queue", b =>
                {
                    b.Navigation("Passwords");
                });

            modelBuilder.Entity("Totem.Domain.Aggregates.ServiceLocationAggregate.ServiceLocation", b =>
                {
                    b.Navigation("Queues");
                });
#pragma warning restore 612, 618
        }
    }
}
